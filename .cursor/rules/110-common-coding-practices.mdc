---
description: 共通コーディング規約とプラクティス
globs: ["**/*.{kt,java,ts,tsx,js,jsx}"]
tags: ["coding", "practices", "common"]
priority: 110
version: 1.0.0
---

# 共通コーディング規約とプラクティス

## 基本原則
- **SOLID原則**: 単一責任、オープン・クローズド、リスコフの置換、インターフェース分離、依存性逆転の原則を遵守する
- **DRY (Don't Repeat Yourself)**: コードの重複を避ける
- **KISS (Keep It Simple, Stupid)**: シンプルな解決策を優先する
- **YAGNI (You Aren't Gonna Need It)**: 必要になるまで機能を追加しない

## 命名規則
- 全てのコードで意味のある、自己説明的な命名を使用する
- キャメルケース（camelCase）とパスカルケース（PascalCase）を適切に使用する
  - JavaScriptとTypeScriptではキャメルケース
  - Kotlinではプロパティとメソッドにキャメルケース、クラスにパスカルケース
- 命名はドメイン言語を反映させ、技術的な詳細ではなくビジネスの意図を表現する
- 短縮形や略語は一般的に理解されるもの以外は避ける

## コメント
- コードが「なぜ」そのように書かれているかを説明するコメントを書く
- 自明なコード（「何」をしているか）には冗長なコメントを避ける
- APIドキュメント用コメントを適切に使用する（KDoc, JSDoc等）
- TODOコメントには必ず理由と可能な解決策を含める

## エラー処理
- 例外やエラーは明示的に処理する
- カスタム例外クラスを使用してドメイン固有のエラーを表現する
- エラーメッセージはわかりやすく、対処方法がわかるようにする
- try-catchブロックの範囲を最小限に保つ

## セキュリティ
- 入力値は常にバリデーションとサニタイズを行う
- SQLインジェクション、XSS、CSRF対策を実装する
- 認証と認可のチェックを徹底する
- 機密情報をログに出力しない
- シークレットはコードに埋め込まず、環境変数や専用の管理システムを使用する

## パフォーマンス
- 不必要な計算やデータベースクエリを避ける
- データベースのN+1問題に注意する
- 大きなデータセットに対してはページネーションを使用する
- リソースを使い終わったら必ず解放する（接続のクローズなど）

## ドメイン駆動設計（DDD）のプラクティス
- ドメインモデルを中心に設計する
- ユビキタス言語（共通言語）を使用し、コードとドキュメントで一貫性を保つ
- 集約ルートを通じてのみエンティティにアクセスする
- バウンデッドコンテキスト（境界づけられたコンテキスト）を明確に定義する
- ドメインイベントを使用して異なるコンテキスト間の連携を行う

## 特殊なルール
- **UUID主キー最適化**: {{500-database-migrations}}を参照
  - 主キーにはUUIDを使用
  - UUIDはタイムスタンプビットをスワップし、時系列でのインデックス効率を向上
  - アプリケーション層でUUID⇔バイナリ変換を処理

## バージョン管理プラクティス
- 意味のあるコミットメッセージを書く（コンベンショナルコミットを推奨）
- 1つのコミットに1つの変更を含める
- ブランチ名には作業内容がわかる名前を使用する
- プルリクエストは小さく保ち、レビューしやすくする

## テスト
- テストは自動化し、CIパイプラインで実行する
- 単体テスト、統合テスト、E2Eテストを適切に組み合わせる
- テストコードも本番コードと同じ品質基準を適用する
- テストケースは境界値、エッジケース、例外処理を含める

## ドキュメント
- コードベースのナビゲーションに役立つREADMEファイルを維持する
- ドメインモデルの図表（ERD、クラス図など）を更新する
- APIドキュメント（Swagger/OpenAPI）を維持する
- アーキテクチャの決定記録（ADR）を残す 