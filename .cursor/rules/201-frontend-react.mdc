---
description: Reactフロントエンドの開発ベストプラクティス
globs: ["frontend/**/*.{tsx,jsx,ts,js}"]
tags: ["frontend", "react", "typescript"]
priority: 201
version: 1.0.0
---

# Reactフロントエンドの開発ベストプラクティス

## コンポーネント設計
- コンポーネントは単一責任の原則に従って設計する
- Presentational ComponentsとContainer Componentsを分離する
- 再利用可能なコンポーネントは`frontend/src/components/common`ディレクトリに配置する
- 機能ごとのコンポーネントは`frontend/src/features/[機能名]`ディレクトリに配置する
- コンポーネントファイル名はパスカルケース（PascalCase）で命名する

## ディレクトリ構造
```
frontend/src/
├── api/                 # APIクライアント
│   ├── auth.ts          # 認証関連API
│   ├── posts.ts         # 投稿関連API
│   └── users.ts         # ユーザー関連API
├── components/          # 共通コンポーネント
│   ├── common/          # アプリ全体で使用する汎用コンポーネント
│   └── layout/          # レイアウト関連コンポーネント
├── features/            # 機能ごとのモジュール
│   ├── auth/            # 認証機能
│   ├── feed/            # フィードタイムライン
│   ├── post/            # 投稿機能
│   └── profile/         # プロファイル管理
├── hooks/               # カスタムフック
├── store/               # 状態管理（Redux Toolkit）
├── styles/              # グローバルスタイル
└── utils/               # ユーティリティ関数
```

## データフェッチング
- APIリクエストは`frontend/src/api`ディレクトリに定義し、Axiosを使用する
- React Queryを使用してデータフェッチングとキャッシュを管理する
- ローディング状態とエラー状態を適切に処理する
- APIクライアントは責務ごとに分割する（例：`auth.ts`, `posts.ts`）

## 状態管理
- コンポーネントローカルな状態には`useState`と`useReducer`を使用する
- グローバル状態にはRedux Toolkitを使用する
- Redux状態は機能ごとにスライスに分割する
- セレクターを使用して状態の派生データを計算する
- 非同期アクションにはcreateAsyncThunkを使用する

## パフォーマンス最適化
- 適切な場所でコンポーネントをメモ化する（`React.memo`, `useMemo`, `useCallback`）
- 不要な再レンダリングを避けるため、プロップのメモ化に注意する
- 大きなリストには仮想化（`react-window`または`react-virtualized`）を使用する
- 画像には遅延ロードを実装する
- バンドルサイズを最小限に抑えるため、動的インポートを活用する

## 型安全性
- すべてのコンポーネントpropsに適切な型定義を行う
- APIレスポンスには明示的な型を定義する
- `any`型の使用を避け、必要な場合は理由をコメントで説明する
- インデックスシグネチャよりも正確な型定義を優先する
- zod/yupでフォームとAPIレスポンスのバリデーションを行う

## フォーム実装
- フォーム管理にはReact Hook Formを使用する
- バリデーションにはzodを使用し、yup.resolverを通じてReact Hook Formと連携する
- フォームの状態変化に応じたUIフィードバックを提供する
- 大きなフォームはセクションに分割し、段階的に表示する

## アクセシビリティ
- 意味のあるHTMLタグを使用する（divの過剰な使用を避ける）
- 適切なaria属性を設定する
- キーボードナビゲーションをサポートする
- カラーコントラストを確保し、スクリーンリーダーでアクセス可能なUIを作成する

## エラー処理
- グローバルエラーバウンダリを実装する
- APIリクエストのエラーを適切に処理し、ユーザーにフィードバックを提供する
- フォームバリデーションエラーを明確に表示する
- オフライン状態の検出と処理を実装する

## テスト
- テストについては{{301-frontend-testing}}を参照してください 