---
description: フロントエンドのテストのベストプラクティス
globs: ["frontend/**/*.{test,spec}.{ts,tsx,js,jsx}"]
tags: ["testing", "frontend", "quality"]
priority: 301
version: 1.0.0
---

# フロントエンドのテストのベストプラクティス

## テスト構造
- テストファイルは対象のコンポーネントファイルと同じディレクトリに配置する
- テストファイルの命名規則は`[コンポーネント名].test.[拡張子]`とする
- テストケースはBDD形式で記述する（describe, it, expect）
- テストは単体テスト、インテグレーションテスト、E2Eテストの階層で構成する

```
frontend/src/features/post/
├── components/
│   ├── PostForm.tsx           # コンポーネント
│   └── PostForm.test.tsx      # コンポーネントのテスト
├── hooks/
│   ├── usePostForm.ts         # カスタムフック
│   └── usePostForm.test.ts    # フックのテスト
└── slice/
    ├── postSlice.ts           # Reduxスライス
    └── postSlice.test.ts      # スライスのテスト
```

## 単体テスト
- React Testing Libraryを使用してコンポーネントをテストする
- JestのモックシステムでAPIコールをモックする
- Reduxスライス、セレクター、リデューサーなどの状態ロジックを独立してテストする
- カスタムフックは`@testing-library/react-hooks`を使用してテストする

## コンポーネントテスト
- インプレメンテーションではなく、ユーザーの行動に基づいてテストする
- `getBy`や`findBy`などのRTLのクエリを適切に使用する
- aria属性やラベルを使ってアクセシビリティを考慮した要素の取得方法を使用する
- ユーザーのインタラクションをシミュレートするために`user-event`を使用する
- スナップショットテストは最小限にとどめ、視覚的な変更が多いコンポーネントに限定する

```tsx
// 良いテスト例
it('should submit form with valid data', async () => {
  const mockSubmit = jest.fn();
  const user = userEvent.setup();
  
  render(<PostForm onSubmit={mockSubmit} />);
  
  await user.type(screen.getByLabelText('内容'), 'テスト投稿です');
  await user.click(screen.getByRole('button', { name: '投稿する' }));
  
  expect(mockSubmit).toHaveBeenCalledWith({
    content: 'テスト投稿です'
  });
});
```

## インテグレーションテスト
- コンポーネント間の連携をテストする
- Reduxストアとコンポーネントの統合をテストする
- APIモックにMSWを使用して実際のAPIレスポンスに近い環境を作る
- 複数のコンポーネントが連携する機能単位でテストする

## E2Eテスト
- Playwrightを使用してブラウザベースのE2Eテストを実装する
- 重要なユーザーフローに焦点を当て、全画面のE2Eテストはカバレッジを最大化する主要なフローに限定する
- テスト環境用のモックAPIサーバーを使用する
- 異なるブラウザでの動作確認を自動化する

## テストデータ
- テストデータは各テストファイル内で定義するか、専用のデータ生成ユーティリティを使用する
- テストデータ生成には`@faker-js/faker`を使用する
- 標準的なテストデータを共有できる`testUtils.ts`ファイルを作成する
- テスト間でデータの依存関係がないようにする

## モック戦略
- 外部依存関係（API、ブラウザAPI、サードパーティーライブラリ）は適切にモックする
- モックは実際の実装に近い動作を再現する
- JestのモックシステムかMSW（Mock Service Worker）を使用する
- グローバルモックは`frontend/src/test/setup.ts`で設定する

## テストカバレッジ
- Jest設定でカバレッジレポートを生成するように設定する
- ビジネスロジックを含むコアコンポーネントとカスタムフックは高いカバレッジ（80%以上）を目指す
- UIコンポーネントは主要な機能パスのカバレッジを確保する
- CIパイプラインでカバレッジレポートを生成し、閾値を下回る場合は警告または失敗させる

## テスト環境
- テスト用の`.env.test`ファイルを作成し、テスト環境固有の設定を管理する
- 本番環境の依存関係をモックして不要なネットワークリクエストを防ぐ
- CI環境ではヘッドレスモードでテストを実行する 