---
description: Apply best practices for development environment and Docker setup
globs: ["docker*", "docker-compose*", "Dockerfile*", "*.env*"]
tags: ["devops", "docker", "environment"]
priority: 3
version: 1.0.0
---

# Development Environment

## Docker-based Environment
- All services run in Docker containers
- Docker Compose for local development
- Volume mounts for code changes
- Hot reload for development efficiency

## Service Architecture
```
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│    Frontend     │────▶│    Backend      │────▶│    Database     │
│    (Next.js)    │     │  (Spring Boot)  │     │    (MySQL)      │
│                 │     │                 │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
        │                       │                       │
        │                       │                       │
        ▼                       ▼                       ▼
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│   MinIO (S3)    │     │    Redis        │     │    Tests        │
│                 │     │                 │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
```

## Docker Compose Configuration
```yaml
version: '3.8'

services:
  # Backend application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: xclone-backend
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - ~/.gradle:/root/.gradle
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    env_file:
      - .env.local
    depends_on:
      - mysql
      - redis
      - minio
    networks:
      - xclone-network

  # Frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: xclone-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080/api
    env_file:
      - .env.local
    depends_on:
      - backend
    networks:
      - xclone-network

  # MySQL database
  mysql:
    image: mysql:8.0
    container_name: xclone-mysql
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=xclone
    networks:
      - xclone-network

  # Redis cache
  redis:
    image: redis:7.0-alpine
    container_name: xclone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - xclone-network

  # MinIO storage
  minio:
    image: minio/minio
    container_name: xclone-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    networks:
      - xclone-network

networks:
  xclone-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:
  minio-data:
```

## Environment Variables
- Use `.env.local` for local development
- Configure environment-specific variables
- Load environment variables at application startup
- Never commit sensitive values to version control

### Example .env.local
```
# Application
APP_ENV=development
SERVER_PORT=8080

# Database
DB_HOST=mysql
DB_PORT=3306
DB_NAME=xclone
DB_USERNAME=root
DB_PASSWORD=password

# Redis
REDIS_HOST=redis
REDIS_PORT=6379

# MinIO
MINIO_ENDPOINT=http://minio:9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_BUCKET=xclone

# Security
JWT_SECRET=your-secret-key-here-should-be-very-long-and-secure
JWT_EXPIRATION=86400000

# Logging
LOG_LEVEL=INFO
```

## Development Workflow
1. Start all services: `docker-compose up -d`
2. Backend development:
   - Code changes are reflected with Spring Boot DevTools
   - Database migrations with Flyway
   - API testing with Postman or cURL
3. Frontend development:
   - Next.js hot module replacement for instant updates
   - Component development with live preview
4. Testing:
   - Run unit tests in isolation
   - Run E2E tests against the full environment

## Performance Optimization
- Configure appropriate memory limits for containers
- Use volume mounts to avoid rebuilding images
- Leverage Docker layer caching
- Start containers in the correct order based on dependencies 