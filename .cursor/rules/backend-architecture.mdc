---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
# バックエンドのクリーンアーキテクチャとDDDの実装ガイドライン

File patterns: **/*.kt

## 概要

このルールは、Kotlin + Spring Bootを使用したバックエンドにおけるクリーンアーキテクチャとドメイン駆動設計（DDD）の実装ガイドラインを定義します。このガイドラインに従うことで、ビジネスロジックの変更に強く、テスト容易性が高く、長期的なメンテナンス性に優れたシステムを構築できます。

## クリーンアーキテクチャの基本原則

1. **依存関係の方向**: 依存関係は常に内側から外側に向かうようにする（依存性逆転の原則）
2. **レイヤー分離**: 各レイヤーは明確に分離し、適切なインターフェースを通じて通信する
3. **ドメイン中心**: ビジネスロジックをドメイン層に集中させ、技術的詳細から分離する
4. **テスト容易性**: 各レイヤーが疎結合であることで、単体テストを容易にする

## レイヤー構造

クリーンアーキテクチャでは、以下の4つのレイヤーで構成されます：

1. **Entities（ドメイン層）**: ビジネスロジックの中心となるオブジェクト
2. **Use Cases（アプリケーション層）**: アプリケーション固有のビジネスルール
3. **Interface Adapters（アダプター層）**: 外部システムとの連携部分
4. **Frameworks & Drivers（インフラストラクチャ層）**: 技術的詳細を含む最外層

## パッケージ構造

```
com.example.myapp
├── domain            # ドメイン層
│   ├── model         # ドメインモデル
│   │   ├── [集約ルート1]  # 集約ルート1
│   │   │   ├── entity  # 集約ルート1関連エンティティ
│   │   │   └── value   # 集約ルート1関連値オブジェクト
│   │   ├── [集約ルート2]  # 集約ルート2
│   │   │   ├── entity  # 集約ルート2関連エンティティ
│   │   │   └── value   # 集約ルート2関連値オブジェクト
│   ├── repository    # リポジトリインターフェース
│   │   ├── [集約ルート1]  # 集約ルート1関連リポジトリ
│   │   ├── [集約ルート2]  # 集約ルート2関連リポジトリ
│   └── service       # ドメインサービス
│       ├── [集約ルート1]  # 集約ルート1関連サービス
│       ├── [集約ルート2]  # 集約ルート2関連サービス
├── application       # アプリケーション層
│   ├── usecase       # ユースケース
│   │   ├── command   # コマンド型ユースケース
│   │   │   ├── [プロセス//任意のユースケース]  # 特定のビジネスプロセスに関連するコマンド
│   │   │   └── common  # 共通/集約横断的なコマンド
│   │   └── query     # クエリ型ユースケース
│   │       ├── [プロセス/任意のユースケース]  # 特定のビジネスプロセスに関連するクエリ
│   │       └── common  # 共通/集約横断的なクエリ
│   └── dto           # Data Transfer Objects
├── adapter           # アダプター層
│   ├── persistence   # 永続化アダプター
│   │   ├── entity    # DB用エンティティ
│   │   └── repository # リポジトリ実装
│   ├── api           # API関連アダプター
│   │   ├── controller # コントローラー
│   │   └── request    # リクエストモデル
│   └── external      # 外部サービスアダプター
└── infrastructure    # インフラストラクチャ層
    ├── config        # 設定関連
    ├── security      # セキュリティ関連
    └── util          # ユーティリティ
```

注: `[集約ルート]` の部分は、実際のドメイン用語に置き換えてください（例：product, order, customerなど）。

## ドメイン層の実装ガイドライン

### 値オブジェクト（Value Objects）

値オブジェクトは不変であり、等価性で比較されます。

```kotlin
// 良い例
data class EntityId private constructor(val value: UUID) {
    companion object {
        fun generate(): EntityId = EntityId(UUID.randomUUID())
        fun from(value: UUID): EntityId = EntityId(value)
        fun from(value: String): EntityId = try {
            EntityId(UUID.fromString(value))
        } catch (e: IllegalArgumentException) {
            throw IllegalArgumentException("Invalid EntityId format")
        }
    }
}

// 良い例
data class Name private constructor(val value: String) {
    companion object {
        fun from(value: String): Name {
            require(value.isNotBlank()) { "Name cannot be blank" }
            require(value.length <= 100) { "Name cannot exceed 100 characters" }
            return Name(value)
        }
    }
}
```

### エンティティ（Entities）

エンティティはIDで識別され、状態を変更できます。

```kotlin
data class Entity(
    val id: EntityId,
    val ownerId: OwnerId,
    val name: Name,
    val attributes: List<AttributeId>,
    val createdAt: CreatedAt,
    val updatedAt: UpdatedAt,
    val status: EntityStatus
) {
    fun update(newName: Name): Entity {
        require(status == EntityStatus.ACTIVE) { "非アクティブなエンティティは更新できません" }
        return copy(
            name = newName,
            updatedAt = UpdatedAt.now()
        )
    }
    
    fun deactivate(): Entity {
        return copy(
            status = EntityStatus.INACTIVE,
            updatedAt = UpdatedAt.now()
        )
    }
}
```

### リポジトリインターフェース（Repository Interfaces）

ドメイン層にリポジトリのインターフェースを定義します。

```kotlin
interface EntityRepository {
    fun save(entity: Entity): Entity
    fun findById(id: EntityId): Entity?
    fun findByOwnerId(ownerId: OwnerId, limit: Int, offset: Int): List<Entity>
    fun delete(id: EntityId)
}
```

## アプリケーション層の実装ガイドライン

### ユースケース（Use Cases）

各ユースケースは単一の責務を持ち、ドメインオブジェクトを操作します。

```kotlin
class CreateEntityUseCase(
    private val entityRepository: EntityRepository,
    private val attributeRepository: AttributeRepository,
    private val notificationService: NotificationService
) {
    fun execute(command: CreateEntityCommand): EntityId {
        // 属性の検証
        val attributes = command.attributeIds?.let {
            attributeRepository.validateAttributesExist(it)
        } ?: emptyList()
        
        // エンティティの作成
        val entity = Entity(
            id = EntityId.generate(),
            ownerId = command.ownerId,
            name = Name.from(command.name),
            attributes = attributes,
            createdAt = CreatedAt.now(),
            updatedAt = UpdatedAt.now(),
            status = EntityStatus.ACTIVE
        )
        
        // 保存
        entityRepository.save(entity)
        
        // 通知
        notificationService.notifyCreated(entity)
        
        return entity.id
    }
}

data class CreateEntityCommand(
    val ownerId: OwnerId,
    val name: String,
    val attributeIds: List<String>?
)
```

## アダプター層の実装ガイドライン

### APIコントローラー（API Controllers）

コントローラーはHTTPリクエストを受け取り、ユースケースを呼び出します。

```kotlin
@RestController
@RequestMapping("/api/entities")
class EntityController(
    private val createEntityUseCase: CreateEntityUseCase,
    private val getEntityUseCase: GetEntityUseCase,
    private val deleteEntityUseCase: DeleteEntityUseCase
) {
    @PostMapping
    fun createEntity(@RequestBody request: CreateEntityRequest, authentication: Authentication): ResponseEntity<EntityResponse> {
        val ownerId = OwnerId.from(authentication.name)
        
        val command = CreateEntityCommand(
            ownerId = ownerId,
            name = request.name,
            attributeIds = request.attributeIds
        )
        
        val entityId = createEntityUseCase.execute(command)
        val entity = getEntityUseCase.execute(GetEntityQuery(entityId))
        
        return ResponseEntity.status(HttpStatus.CREATED).body(EntityResponse.from(entity))
    }
}
```

### リポジトリ実装（Repository Implementations）

リポジトリの実装は、ドメインオブジェクトとデータベースエンティティの変換を担当します。

```kotlin
@Repository
class EntityRepositoryImpl(
    private val entityJpaRepository: EntityJpaRepository,
    private val entityMapper: EntityMapper
) : EntityRepository {
    override fun save(entity: Entity): Entity {
        val jpaEntity = entityMapper.toJpaEntity(entity)
        val savedEntity = entityJpaRepository.save(jpaEntity)
        return entityMapper.toDomain(savedEntity)
    }
    
    override fun findById(id: EntityId): Entity? {
        return entityJpaRepository.findById(id.value)
            .map { entityMapper.toDomain(it) }
            .orElse(null)
    }
}
```

## インフラストラクチャ層の実装ガイドライン

### 設定クラス（Configuration Classes）

Spring Bootの設定クラスはインフラストラクチャ層に配置します。

```kotlin
@Configuration
@EnableWebSecurity
class SecurityConfig(
    private val authenticationProvider: AuthenticationProvider
) {
    @Bean
    fun securityFilterChain(http: HttpSecurity): SecurityFilterChain {
        return http
            .csrf { it.disable() }
            .authorizeHttpRequests { auth ->
                auth
                    .requestMatchers("/api/auth/**").permitAll()
                    .anyRequest().authenticated()
            }
            .sessionManagement { session ->
                session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            }
            .authenticationProvider(authenticationProvider)
            .build()
    }
}
```

### ユーティリティクラス（Utility Classes）

共通のユーティリティもインフラストラクチャ層に配置します。

```kotlin
object UuidUtil {
    fun uuidToBytes(uuid: UUID): ByteArray {
        val buffer = ByteBuffer.wrap(ByteArray(16))
        buffer.putLong(uuid.mostSignificantBits)
        buffer.putLong(uuid.leastSignificantBits)
        return buffer.array()
    }
    
    fun bytesToUuid(bytes: ByteArray): UUID {
        val buffer = ByteBuffer.wrap(bytes)
        val high = buffer.getLong()
        val low = buffer.getLong()
        return UUID(high, low)
    }
}
```

## データベースアクセス技術

データベースアクセス技術（JPA、jOOQ、MyBatisなど）の選択と実装の詳細については、それぞれ以下のガイドラインを参照してください：

- jOOQ: `.cursor/rules/jooq-rules.mdc`
- Flyway: `.cursor/rules/migration-strategy.mdc`

## アンチパターン

以下のようなアンチパターンは避けてください：

1. **レイヤー間の直接依存**: 外側のレイヤーから内側のレイヤーに直接依存しない
2. **プレゼンテーションロジックの混在**: ビジネスロジックとプレゼンテーションロジックを混在させない
3. **ドメインオブジェクトの公開**: ドメインオブジェクトをAPIレスポンスとして直接公開しない
4. **アノーテーション汚染**: ドメインモデルに永続化アノーテーションを付与しない
5. **単一責務の原則違反**: クラスやメソッドが複数の責務を持たないようにする

## まとめ

クリーンアーキテクチャとDDDを組み合わせることで、ビジネスロジックに集中し、技術的な詳細から分離された、保守性の高いコードベースを実現できます。各レイヤーの責務を明確にし、依存関係の方向を適切に管理することが重要です。 