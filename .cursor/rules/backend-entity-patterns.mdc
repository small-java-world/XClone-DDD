---
description: 
globs: 
alwaysApply: false
---
---
description: エンティティと値オブジェクトの実装パターン
globs: ["**/src/main/kotlin/**/domain/model/**/*.kt"]
alwaysApply: false
---
# エンティティと値オブジェクトの実装パターン

## このルールの要約
- エンティティはIDを持ち、同一性によって区別される
- 値オブジェクトは属性値によって区別される不変のオブジェクト
- エンティティはcreate/reconstructメソッドを通じて生成する
- 状態変更は新しいインスタンスを返すメソッドで実装する

## エンティティの実装パターン

### 基本原則
- プライベートコンストラクタを使用し、ファクトリーメソッドを通じてインスタンス化
- 新規作成用のcreateメソッドとDB復元用のreconstructメソッドを提供
- コレクションはプライベートフィールドとして保持し、不変なコレクションとして公開
- 状態変更メソッドは新しいインスタンスを返す
- ビジネスロジックの検証はドメインモデル内で行う

### 実装例

```kotlin
// クラス定義 - プライベートコンストラクタを使用
class Product private constructor(
    val id: ProductId,
    val sellerId: SellerId,
    val name: ProductName,
    val description: ProductDescription,
    private val _imageIds: List<ImageId>,
    val price: Price,
    val createdAt: CreatedAt,
    val updatedAt: UpdatedAt,
    val status: ProductStatus
) {
    // 不変なコレクションを返す
    val imageIds: List<ImageId> get() = _imageIds.toList()

    companion object {
        // ファクトリーメソッド - 新規作成用
        fun create(
            sellerId: SellerId,
            name: ProductName,
            description: ProductDescription,
            imageIds: List<ImageId>,
            price: Price
        ): Product {
            // ドメインルールの検証
            require(imageIds.size <= 10) { "商品画像は最大10枚までです" }
            
            return Product(
                id = ProductId.generate(),
                sellerId = sellerId,
                name = name,
                description = description,
                _imageIds = imageIds,
                price = price,
                createdAt = CreatedAt.now(),
                updatedAt = UpdatedAt.now(),
                status = ProductStatus.ACTIVE
            )
        }
        
        // リコンストラクターメソッド - DB復元用
        fun reconstruct(
            id: ProductId,
            sellerId: SellerId,
            name: ProductName,
            description: ProductDescription,
            imageIds: List<ImageId>,
            price: Price,
            createdAt: CreatedAt,
            updatedAt: UpdatedAt,
            status: ProductStatus
        ): Product {
            return Product(
                id = id,
                sellerId = sellerId,
                name = name,
                description = description,
                _imageIds = imageIds,
                price = price,
                createdAt = createdAt,
                updatedAt = updatedAt,
                status = status
            )
        }
    }
    
    // ビジネスメソッド - 必要に応じて明示的に定義
    fun update(name: ProductName, description: ProductDescription, price: Price): Product {
        require(status == ProductStatus.ACTIVE) { "非アクティブな商品は更新できません" }
        
        // 新しいインスタンスを作成
        return Product(
            id = this.id,
            sellerId = this.sellerId,
            name = name,
            description = description,
            _imageIds = this._imageIds,
            price = price,
            createdAt = this.createdAt,
            updatedAt = UpdatedAt.now(),
            status = this.status
        )
    }
    
    fun deactivate(): Product {
        // 新しいインスタンスを作成
        return Product(
            id = this.id,
            sellerId = this.sellerId,
            name = this.name,
            description = this.description,
            _imageIds = this._imageIds,
            price = this.price,
            createdAt = this.createdAt,
            updatedAt = UpdatedAt.now(),
            status = ProductStatus.INACTIVE
        )
    }
    
    fun addImage(imageId: ImageId): Product {
        require(status == ProductStatus.ACTIVE) { "非アクティブな商品は画像を追加できません" }
        require(_imageIds.size < 10) { "商品画像は最大10枚までです" }
        
        val newImageIds = _imageIds + imageId
        
        return Product(
            id = this.id,
            sellerId = this.sellerId,
            name = this.name,
            description = this.description,
            _imageIds = newImageIds,
            price = this.price,
            createdAt = this.createdAt,
            updatedAt = UpdatedAt.now(),
            status = this.status
        )
    }
}
```

## 値オブジェクトの実装パターン

### 基本原則
- 不変（イミュータブル）で同値性を持つ
- プライベートコンストラクタと静的ファクトリーメソッドを使用
- バリデーションをコンストラクタまたはファクトリーメソッドで行う
- 値を変更する場合は新しいインスタンスを返す
- 可能な限り`@JvmInline value class`を使用

### 実装例

```kotlin
@JvmInline
value class ProductId private constructor(private val value: UUID) {
    companion object {
        fun generate(): ProductId = ProductId(UuidGenerator.generateV7())
        fun from(value: UUID): ProductId = ProductId(value)
        fun from(value: String): ProductId = ProductId(UUID.fromString(value))
    }
    
    fun value(): UUID = value
    override fun toString(): String = value.toString()
}

@JvmInline
value class ProductName private constructor(private val value: String) {
    companion object {
        fun from(value: String): ProductName {
            require(value.isNotBlank()) { "商品名は空白にできません" }
            require(value.length <= 100) { "商品名は100文字以内にしてください" }
            return ProductName(value)
        }
    }
    
    fun value(): String = value
    override fun toString(): String = value
}
```

## 集約（Aggregate）の実装

### 基本原則
- 集約はトランザクション整合性の境界
- 集約ルートを通じてのみアクセスする
- コレクションフィールドはプライベートにし、不変なビューを提供
- 状態変更は新しいインスタンスを返すメソッドで実装

### 実装例

```kotlin
// Order集約
class Order private constructor(
    val id: OrderId,          // 集約ルート識別子
    val customerId: CustomerId,
    private val _orderItems: MutableList<OrderItem> = mutableListOf(),  // 集約内の子エンティティ
    val shippingAddress: Address,
    val status: OrderStatus,
    val createdAt: CreatedAt,
    val updatedAt: UpdatedAt
) {
    // 不変なコレクションを返す
    val orderItems: List<OrderItem>
        get() = _orderItems.toList()
    
    companion object {
        // ファクトリーメソッド - 新規作成用
        fun create(
            customerId: CustomerId,
            shippingAddress: Address
        ): Order {
            return Order(
                id = OrderId.generate(),
                customerId = customerId,
                _orderItems = mutableListOf(),
                shippingAddress = shippingAddress,
                status = OrderStatus.DRAFT,
                createdAt = CreatedAt.now(),
                updatedAt = UpdatedAt.now()
            )
        }
        
        // リコンストラクターメソッド - DB復元用
        fun reconstruct(
            id: OrderId,
            customerId: CustomerId,
            orderItems: List<OrderItem>,
            shippingAddress: Address,
            status: OrderStatus,
            createdAt: CreatedAt,
            updatedAt: UpdatedAt
        ): Order {
            return Order(
                id = id,
                customerId = customerId,
                _orderItems = orderItems.toMutableList(),
                shippingAddress = shippingAddress,
                status = status,
                createdAt = createdAt,
                updatedAt = updatedAt
            )
        }
    }
    
    fun addOrderItem(orderItem: OrderItem): Order {
        require(status == OrderStatus.DRAFT) { "確定済みの注文には商品を追加できません" }
        
        val newItems = _orderItems.toMutableList()
        newItems.add(orderItem)
        
        return Order(
            id = this.id,
            customerId = this.customerId,
            _orderItems = newItems,
            shippingAddress = this.shippingAddress,
            status = this.status,
            createdAt = this.createdAt,
            updatedAt = UpdatedAt.now()
        )
    }
    
    fun removeOrderItem(orderItemId: OrderItemId): Order {
        require(status == OrderStatus.DRAFT) { "確定済みの注文からは商品を削除できません" }
        
        val newItems = _orderItems.toMutableList()
        newItems.removeIf { it.id == orderItemId }
        
        return Order(
            id = this.id,
            customerId = this.customerId,
            _orderItems = newItems,
            shippingAddress = this.shippingAddress,
            status = this.status,
            createdAt = this.createdAt,
            updatedAt = UpdatedAt.now()
        )
    }
    
    fun calculateTotalAmount(): Money {
        return _orderItems.fold(Money.zero()) { total, item -> total.add(item.calculateSubtotal()) }
    }
    
    fun confirm(): Order {
        require(status == OrderStatus.DRAFT) { "確定済みの注文は再確定できません" }
        require(_orderItems.isNotEmpty()) { "注文には最低1つの商品が必要です" }
        
        return Order(
            id = this.id,
            customerId = this.customerId,
            _orderItems = this._orderItems,
            shippingAddress = this.shippingAddress,
            status = OrderStatus.CONFIRMED,
            createdAt = this.createdAt,
            updatedAt = UpdatedAt.now()
        )
    }
} 