---
description: 
globs: 
alwaysApply: false
---
---
description: バックエンド環境変数管理ガイドライン
globs: ["**/*.kt", "**/*.java", "**/application.yml", "**/application.properties", "**/build.gradle", "**/build.gradle.kts"]
---
# バックエンド環境変数管理ガイドライン

このルールは、バックエンド（Kotlin/Spring Boot）における環境変数の適切な管理方法を定義しています。

## バックエンドルール

### バックエンド環境変数ファイル

- Spring Bootの環境変数管理機能を活用してください
- 開発環境ではプロファイル機能を使用し、`application-dev.yml`などでプロファイル別設定を行ってください
- 機密情報は`.env.local`ファイルで管理し、Gradle起動時に読み込む仕組みを実装してください
- Gradleタスク実行時に`.env.local`ファイルから環境変数を読み込むプラグインを導入してください
  ```kotlin
  // build.gradle.kts
  plugins {
      id("com.github.johnrengelman.shadow") version "7.1.2"
      id("org.springframework.boot") version "3.2.0"
      id("io.spring.dependency-management") version "1.1.4"
      id("org.jetbrains.kotlin.jvm") version "1.9.20"
      id("org.jetbrains.kotlin.plugin.spring") version "1.9.20"
      id("io.github.cdimascio.dotenv") version "2.0.1" // .env.localファイルを読み込むためのプラグイン
  }
  
  // .env.localファイルを読み込み
  tasks.withType<org.springframework.boot.gradle.tasks.run.BootRun> {
      doFirst {
          val envFile = file(".env.local")
          if (envFile.exists()) {
              val envVars = envFile.readLines()
                  .filter { it.isNotBlank() && !it.startsWith("#") }
                  .map { line -> line.split("=", limit = 2) }
                  .filter { it.size == 2 }
                  .associate { it[0] to it[1] }
              
              environment(envVars)
          } else {
              logger.warn(".env.localファイルが見つかりません。必要に応じて作成してください。")
          }
      }
  }
  ```
- 設定の優先順位を理解し、環境変数 > システムプロパティ > 設定ファイルの順で適用されることを考慮してください

### バックエンド環境変数の命名規則

- Spring Bootの慣習に従い、環境変数は`SPRING_`プレフィックスを付け、ドットをアンダースコアに置き換えてください
  - 例: `spring.datasource.url` → `SPRING_DATASOURCE_URL`
- データベース接続情報には`SPRING_DATASOURCE_`プレフィックスを使用してください
- キャッシュ設定には`SPRING_CACHE_`プレフィックスを使用してください
- JWTやセキュリティ関連設定には`SPRING_SECURITY_`プレフィックスを使用してください
- アプリケーション固有の設定には`APP_`プレフィックスを使用してください
- スネークケースの大文字を使用してください

### バックエンド環境変数の検証

- アプリケーション起動時に必須環境変数の存在を検証してください
- 欠落している必須環境変数がある場合は、起動を中止し明確なエラーメッセージを表示してください
- 環境変数の型変換エラーを検出して、適切なエラーメッセージを表示してください
- CI/CDパイプラインで環境変数の検証ステップを組み込んでください

### バックエンド環境変数の利用

- 環境変数をモデルクラスにマッピングし、型安全性を確保してください
- `@ConfigurationProperties`アノテーションを活用し、設定のグループ化と検証を行ってください
- Spring Bootの`@Value`アノテーションを使用して個別の環境変数を注入してください
- プレースホルダ構文`${VARIABLE_NAME:defaultValue}`でデフォルト値を指定してください
- 機密情報を処理するための専用サービスを作成し、アクセスを制限してください 