---
description: 
globs: 
alwaysApply: false
---
---
description: ドメインイベントの実装パターン
globs: ["**/src/main/kotlin/**/domain/event/**/*.kt", "**/src/main/kotlin/**/domain/model/**/*Event.kt"]
alwaysApply: false
---
# ドメインイベントの実装パターン

## このルールの要約
- ドメインイベントはドメインで発生した重要な出来事を表現する
- イベントはエンティティ内で発行し、リポジトリを通じて永続化する
- イベントハンドラは分離された責務として実装する
- トランザクション境界を適切に管理してイベント発行の信頼性を確保する

## ドメインイベントの基本原則

### ドメインイベントとは
- 過去に起きた事実を表現する
- 命名は過去形を使用する（例：`OrderPlaced`、`ProductCreated`）
- イミュータブルなデータ構造として実装する
- 必要な識別子とメタデータを含む

### イベント発行の責任
- エンティティ内でビジネスロジックの一部としてイベントを作成
- リポジトリがイベントの永続化を担当
- アプリケーション層がトランザクション境界を提供

## イベント発行の実装パターン

### イベントパブリッシャーの定義

```kotlin
// ドメインイベントインターフェース
interface DomainEvent {
    val eventId: UUID
    val occurredAt: Instant
    val aggregateId: UUID
}

// 基本実装
abstract class BaseDomainEvent(
    override val aggregateId: UUID
) : DomainEvent {
    override val eventId: UUID = UUID.randomUUID()
    override val occurredAt: Instant = Instant.now()
}

// イベントパブリッシャーインターフェース
interface DomainEventPublisher {
    fun publish(event: DomainEvent)
    fun publishAll(events: Collection<DomainEvent>)
}

// Spring実装例
@Component
class SpringDomainEventPublisher(
    private val applicationEventPublisher: ApplicationEventPublisher
) : DomainEventPublisher {
    override fun publish(event: DomainEvent) {
        applicationEventPublisher.publishEvent(event)
    }
    
    override fun publishAll(events: Collection<DomainEvent>) {
        events.forEach { publish(it) }
    }
}
```

### エンティティでのイベント管理

集約ルートクラスを拡張して、イベント管理機能を追加:

```kotlin
// イベント管理機能を持つ基底クラス
abstract class AggregateRoot<ID : Any> {
    private val _domainEvents = mutableListOf<DomainEvent>()
    
    // イベント取得（不変なリスト）
    val domainEvents: List<DomainEvent>
        get() = _domainEvents.toList()
    
    // イベント登録
    protected fun registerEvent(event: DomainEvent) {
        _domainEvents.add(event)
    }
    
    // イベントクリア（リポジトリ実装で使用）
    fun clearEvents() {
        _domainEvents.clear()
    }
}

// 実装例
class Product private constructor(
    val id: ProductId,
    val sellerId: SellerId,
    val name: ProductName,
    // 他のプロパティ
) : AggregateRoot<ProductId>() {
    
    companion object {
        fun create(sellerId: SellerId, name: ProductName, /* 他のパラメータ */): Product {
            val product = Product(
                id = ProductId.generate(),
                sellerId = sellerId,
                name = name,
                // 他のプロパティの初期化
            )
            
            // イベントを登録
            product.registerEvent(ProductCreatedEvent(product.id.value()))
            
            return product
        }
    }
    
    fun update(name: ProductName, /* 他のパラメータ */): Product {
        val updatedProduct = Product(
            id = this.id,
            sellerId = this.sellerId,
            name = name,
            // 他のプロパティの更新
        )
        
        // イベントを登録
        updatedProduct.registerEvent(ProductUpdatedEvent(updatedProduct.id.value()))
        
        return updatedProduct
    }
}
```

### イベント実装例

```kotlin
data class ProductCreatedEvent(
    override val aggregateId: UUID,
    val productName: String? = null  // オプションの追加情報
) : BaseDomainEvent(aggregateId)

data class OrderPlacedEvent(
    override val aggregateId: UUID,
    val customerId: UUID,
    val totalAmount: BigDecimal
) : BaseDomainEvent(aggregateId)
```

### リポジトリでのイベント処理

```kotlin
@Repository
class JpaProductRepository(
    private val productJpaRepository: ProductJpaRepository,
    private val productMapper: ProductMapper,
    private val eventPublisher: DomainEventPublisher
) : ProductRepository {
    
    override fun save(product: Product): Product {
        // エンティティの永続化
        val entity = productMapper.toEntity(product)
        val savedEntity = productJpaRepository.save(entity)
        val savedProduct = productMapper.toDomain(savedEntity)
        
        // イベントの発行
        eventPublisher.publishAll(product.domainEvents)
        
        // イベントをクリア
        product.clearEvents()
        
        return savedProduct
    }
    
    // その他のメソッド
}
```

## イベントハンドリングの実装パターン

### イベントハンドラの基本

```kotlin
@Component
class ProductEventHandler {
    
    @EventListener
    fun handleProductCreated(event: ProductCreatedEvent) {
        // イベント処理ロジック
        // 例：検索インデックスの更新、通知の送信など
    }
    
    @EventListener
    fun handleProductUpdated(event: ProductUpdatedEvent) {
        // イベント処理ロジック
    }
}
```

### 非同期処理パターン

```kotlin
@Component
class AsyncProductEventHandler {
    
    @Async
    @EventListener
    fun handleProductCreated(event: ProductCreatedEvent) {
        // 非同期処理
    }
}
```

### トランザクション管理

トランザクション完了後にイベントを発行する:

```kotlin
@Component
class TransactionalProductEventHandler {
    
    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    fun handleProductCreated(event: ProductCreatedEvent) {
        // トランザクション完了後の処理
    }
}
```

## トランザクションとイベント発行の統合

### リポジトリでのイベント発行パターン

```kotlin
@Component
class ProductRepositoryImpl(
    private val productJpaRepository: ProductJpaRepository,
    private val eventPublisher: DomainEventPublisher
) : ProductRepository {
    
    @Transactional
    override fun save(product: Product): Product {
        // 1. エンティティの保存
        val savedProduct = doSave(product)
        
        // 2. イベントの発行
        eventPublisher.publishAll(product.domainEvents)
        product.clearEvents()
        
        return savedProduct
    }
}
```

### アプリケーション層でのイベント発行

```kotlin
@UseCase
@Transactional
class CreateProductUseCase(
    private val productRepository: ProductRepository,
    private val eventPublisher: DomainEventPublisher
) {
    fun execute(command: CreateProductCommand): ProductId {
        // 1. ドメインオブジェクトの作成
        val product = Product.create(/* パラメータ */)
        
        // 2. リポジトリを使用した永続化
        val savedProduct = productRepository.save(product)
        
        // 3. 追加のイベント発行が必要な場合
        eventPublisher.publish(ApplicationProductCreatedEvent(savedProduct.id.value()))
        
        return savedProduct.id
    }
}
```

## イベントソーシングパターン

高度なイベント管理が必要な場合は、イベントソーシングパターンを検討できます：

```kotlin
@Repository
class EventSourcedProductRepository(
    private val eventStore: EventStore
) : ProductRepository {
    
    override fun findById(id: ProductId): Product? {
        // イベントストアからイベントストリームを取得
        val eventStream = eventStore.getEventsForAggregate(id.value())
        if (eventStream.isEmpty()) return null
        
        // イベントを適用してエンティティを再構築
        return recreateFromEvents(eventStream)
    }
    
    override fun save(product: Product): Product {
        // 新しいイベントのみをイベントストアに保存
        eventStore.saveEvents(product.id.value(), product.domainEvents)
        
        // イベントをクリア
        product.clearEvents()
        
        return product
    }
    
    private fun recreateFromEvents(events: List<DomainEvent>): Product {
        // イベントを適用してエンティティを再構築するロジック
    }
}
```

## ベストプラクティス

1. **イベントの命名**: 過去形の動詞で、何が起きたかを明確に表現
2. **必要な情報**: イベントに必要な情報だけを含め、不要な情報は含めない
3. **副作用の分離**: イベントハンドラ内でのビジネスロジックの実行は避け、別のユースケースを呼び出す
4. **べき等性**: 同じイベントが複数回処理されても問題ないように設計
5. **トランザクション管理**: イベント発行とエンティティの保存を同一トランザクションで管理 