---
description: 
globs: 
alwaysApply: false
---
---
description: リポジトリパターンの実装とインターフェース設計
globs: ["**/src/main/kotlin/**/domain/repository/*.kt", "**/src/main/kotlin/**/infrastructure/repository/*.kt"]
alwaysApply: false
---
# リポジトリパターンの実装とインターフェース設計

## このルールの要約
- リポジトリインターフェースはドメイン層に定義し、実装はインフラストラクチャ層に置く
- CRUD操作の基本メソッドを提供する
- 集約単位でリポジトリを作成する
- トランザクション境界は集約単位で実装する

## リポジトリパターンの基本原則

### 責任の分離
- ドメイン層：リポジトリインターフェースを定義（どのようなデータ操作が必要か）
- アダプター層：リポジトリ実装を提供（どのように永続化するか）
- データベースの詳細はドメイン層から隠蔽する

### トランザクション境界
- 集約（Aggregate）単位でリポジトリを設計
- 複数の集約にまたがる操作はユースケース層で調整

## リポジトリインターフェース設計

### 命名規則
- `[エンティティ名]Repository`: 例えば `ProductRepository`、`OrderRepository`

### 基本メソッド

```kotlin
interface ProductRepository {
    // 単一エンティティの取得
    fun findById(id: ProductId): Product?
    
    // 新規作成と更新
    fun save(product: Product): Product
    
    // 削除
    fun delete(id: ProductId)
    
    // コレクションの取得
    fun findAll(): List<Product>
    
    // 条件による取得
    fun findByStatus(status: ProductStatus): List<Product>
}
```

### ページネーションと並べ替え

```kotlin
interface ProductRepository {
    // ... 他のメソッド
    
    // ページネーション対応
    fun findAll(pageable: Pageable): Page<Product>
    
    // 検索条件とページネーション
    fun findByStatus(status: ProductStatus, pageable: Pageable): Page<Product>
}
```

### 検索条件の扱い - Specification パターン

複雑な検索条件は Specification パターンを使用して表現すると、柔軟な検索が可能になります。

```kotlin
interface ProductRepository {
    // ... 他のメソッド
    
    // Specificationパターンを使用した検索
    fun findBySpecification(spec: ProductSpecification): List<Product>
    fun findBySpecification(spec: ProductSpecification, pageable: Pageable): Page<Product>
}

// Specificationインターフェース
interface ProductSpecification {
    fun isSatisfiedBy(product: Product): Boolean
}

// 実装例
class ActiveProductSpecification : ProductSpecification {
    override fun isSatisfiedBy(product: Product): Boolean {
        return product.status == ProductStatus.ACTIVE
    }
}

class PriceRangeSpecification(private val min: Money, private val max: Money) : ProductSpecification {
    override fun isSatisfiedBy(product: Product): Boolean {
        return product.price >= min && product.price <= max
    }
}

// 組み合わせ
class AndSpecification(
    private val left: ProductSpecification, 
    private val right: ProductSpecification
) : ProductSpecification {
    override fun isSatisfiedBy(product: Product): Boolean {
        return left.isSatisfiedBy(product) && right.isSatisfiedBy(product)
    }
}
```

## リポジトリ実装の原則

### インフラストラクチャの関心事の分離
- エンティティマッピング
- SQL/ORM操作
- トランザクション管理
- キャッシュ管理


### jOOQを使用した実装例

```kotlin
@Repository
class JooqProductRepository(
    private val dsl: DSLContext,
    private val productMapper: ProductJooqMapper
) : ProductRepository {
    
    override fun findById(id: ProductId): Product? {
        val record = dsl.selectFrom(PRODUCTS)
            .where(PRODUCTS.ID.eq(id.value()))
            .fetchOne()
        
        return record?.let { productMapper.toDomain(it) }
    }
    
    override fun save(product: Product): Product {
        val id = product.id.value()
        val exists = dsl.fetchExists(
            dsl.selectFrom(PRODUCTS)
                .where(PRODUCTS.ID.eq(id))
        )
        
        if (exists) {
            dsl.update(PRODUCTS)
                .set(PRODUCTS.NAME, product.name.value())
                .set(PRODUCTS.DESCRIPTION, product.description.value())
                // ... その他のフィールド
                .set(PRODUCTS.UPDATED_AT, product.updatedAt.value())
                .where(PRODUCTS.ID.eq(id))
                .execute()
        } else {
            dsl.insertInto(PRODUCTS)
                .set(PRODUCTS.ID, id)
                .set(PRODUCTS.SELLER_ID, product.sellerId.value())
                .set(PRODUCTS.NAME, product.name.value())
                // ... その他のフィールド
                .execute()
        }
        
        return product
    }
    
    // ... その他のメソッド実装
}
```

### 合成リポジトリパターン - 読み書き分離

パフォーマンス最適化のために読み取り/書き込み操作を分離する場合:

```kotlin
// 読み取り専用操作のインターフェース
interface ProductReadRepository {
    fun findById(id: ProductId): Product?
    fun findAll(pageable: Pageable): Page<Product>
    fun findByStatus(status: ProductStatus): List<Product>
}

// 書き込み操作のインターフェース
interface ProductWriteRepository {
    fun save(product: Product): Product
    fun delete(id: ProductId)
}

// 合成インターフェース
interface ProductRepository : ProductReadRepository, ProductWriteRepository

// 読み取り最適化実装
@Repository
class ProductReadJooqRepository(
    private val dsl: DSLContext,
    private val productMapper: ProductJooqMapper
) : ProductReadRepository {
    // jOOQを使用した読み取り最適化クエリ
}

// 書き込み実装
@Repository
class ProductWriteJpaRepository(
    private val productJpaRepository: ProductJpaRepository,
    private val productMapper: ProductMapper
) : ProductWriteRepository {
    // JPAを使用した書き込み操作
}

// 合成実装
@Repository
@Primary
class CompositeProductRepository(
    private val readRepository: ProductReadRepository,
    private val writeRepository: ProductWriteRepository
) : ProductRepository {
    // 読み取りメソッドは読み取りリポジトリに委譲
    override fun findById(id: ProductId): Product? = readRepository.findById(id)
    override fun findAll(pageable: Pageable): Page<Product> = readRepository.findAll(pageable)
    override fun findByStatus(status: ProductStatus): List<Product> = readRepository.findByStatus(status)
    
    // 書き込みメソッドは書き込みリポジトリに委譲
    override fun save(product: Product): Product = writeRepository.save(product)
    override fun delete(id: ProductId) = writeRepository.delete(id)
}
```

## テスト戦略

### テスト用にモックリポジトリを使用

```kotlin
// インメモリリポジトリ実装（テスト用）
class InMemoryProductRepository : ProductRepository {
    private val products = ConcurrentHashMap<UUID, Product>()
    
    override fun findById(id: ProductId): Product? = products[id.value()]
    
    override fun save(product: Product): Product {
        products[product.id.value()] = product
        return product
    }
    
    override fun delete(id: ProductId) {
        products.remove(id.value())
    }
    
    // ... その他のメソッド実装
}
```

### Spring Bootを使ったリポジトリの統合テスト

```kotlin
@DataJpaTest
class ProductRepositoryTest {
    @Autowired
    private lateinit var productJpaRepository: ProductJpaRepository
    
    private lateinit var productRepository: ProductRepository
    private lateinit var productMapper: ProductMapper
    
    @BeforeEach
    fun setup() {
        productMapper = ProductMapper()
        productRepository = JpaProductRepository(productJpaRepository, productMapper)
    }
    
    @Test
    fun `save and find product by id`() {
        // テスト実装
    }
}
``` 