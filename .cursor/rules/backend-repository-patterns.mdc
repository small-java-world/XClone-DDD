---
description: リポジトリパターンの実装とインターフェース設計
globs: ["**/domain/repository/**/*.kt", "**/adapter/persistence/repository/**/*.kt"]
alwaysApply: false
---
# リポジトリパターンの実装とインターフェース設計

## 適用シナリオ
- リポジトリインターフェースは`domain/repository`に、実装は`adapter/persistence/repository`に配置する
- ドメインモデルの永続化層とのやり取りを担当するリポジトリの実装
- インターフェースの設計（ドメイン層）および実装（インフラ層）
- 他のパターンより優先して適用すべき基盤パターン

## 関連ルール
- entity-factory-patterns: リポジトリで扱うエンティティの実装 (各集約ルート内の`entity`ディレクトリに配置)
- value-object-patterns: IDなどの値オブジェクト (各集約ルートの`value`ディレクトリに配置)
- uuid-binary-storage: UUIDのバイナリストレージ実装
- usecase-command-pattern: リポジトリを使用したエンティティ操作
- usecase-query-pattern: リポジトリを使用したデータ取得

## クイックスタート
- リポジトリインターフェースはドメイン層に定義、実装はインフラストラクチャ層
- 基本メソッド: `findById`, `save`, `delete`, `findAll`
- エンティティの集約単位で１つのリポジトリを作成
- 実装には主にJOOQを使用

## 実装判断フロー
1. どのエンティティのリポジトリ? → 集約ルートのみにリポジトリを作成
2. どのような操作が必要? → 基本CRUD + 必要な検索メソッド
3. 複雑な検索条件? → Specificationパターンまたはクエリサービス

## 最小限実装テンプレート
```kotlin
// ドメイン層: リポジトリインターフェース
interface EntityRepository {
    fun findById(id: EntityId): Entity?
    fun save(entity: Entity): Entity
    fun delete(id: EntityId)
    fun findAll(): List<Entity>
}

// インフラストラクチャ層: リポジトリ実装
@Repository
class EntityRepositoryImpl(
    private val dsl: DSLContext
) : EntityRepository {
    
    override fun findById(id: EntityId): Entity? {
        val record = dsl.selectFrom(ENTITIES)
            .where(ENTITIES.ID.eq(id.value()))
            .fetchOne()
        
        return record?.let { mapToDomain(it) }
    }
    
    override fun save(entity: Entity): Entity {
        // 実装
        return entity
    }
    
    // 他のメソッド実装
}
```

## 実装の主要決定ポイント
- 単純な取得操作 → 基本リポジトリメソッド使用
- 複雑な検索条件 → Specificationパターン追加
- ページネーション必要 → Pageable引数追加
- 複雑な読み取りクエリ → クエリサービスパターン使用

## リポジトリの基本設計詳細

### 基本メソッド
```kotlin
interface EntityRepository {
    // 単一エンティティの取得
    fun findById(id: EntityId): Entity?
    
    // 新規作成と更新
    fun save(entity: Entity): Entity
    
    // 削除
    fun delete(id: EntityId)
    
    // コレクションの取得
    fun findAll(): List<Entity>
    
    // 条件による取得
    fun findByStatus(status: EntityStatus): List<Entity>
}
```

### ページネーション対応（必要な場合）
```kotlin
fun findAll(pageable: Pageable): Page<Entity>
fun findByStatus(status: EntityStatus, pageable: Pageable): Page<Entity>
```

## 複数ルール適用時の優先順位
- リポジトリパターンはドメインオブジェクトのライフサイクル管理の基盤
- 複雑な読み取りクエリは専用のクエリサービスに委譲する
- 複数集約にまたがる操作はアプリケーション層で調整する

## 高度なパターン（必要に応じて）

### Specificationパターン
複雑な検索条件のために使用:
```kotlin
// リポジトリに追加
fun findBySpecification(spec: EntitySpecification): List<Entity>

// 実装例
interface EntitySpecification {
    fun isSatisfiedBy(entity: Entity): Boolean
}

class ActiveEntitySpecification : EntitySpecification {
    override fun isSatisfiedBy(entity: Entity): Boolean {
        return entity.status == EntityStatus.ACTIVE
    }
}
```

### クエリサービスパターン
複雑な読み取り操作を分離:
```kotlin
// 基本構造
interface EntityQueryService {
    fun findById(id: UUID): EntityDto?
    fun findActiveEntities(pageable: Pageable): Page<EntityDto>
}

@Service
class EntityQueryServiceImpl(private val dsl: DSLContext) : EntityQueryService {
    // 実装
}
```

## 実装チェックリスト
- [ ] リポジトリインターフェースをドメイン層に作成
- [ ] 基本メソッド（findById, save, delete, findAll）を定義
- [ ] 必要に応じてカスタム検索メソッドを追加
- [ ] インフラストラクチャ層に実装クラスを作成
- [ ] マッピング処理を実装（データベース⇔ドメインモデル）

## アンチパターン
❌ リポジトリ実装をドメイン層に置く
❌ エンティティ単位ではなくテーブル単位でリポジトリを設計
❌ SQL文をリポジトリに直接ハードコード
❌ 複数集約にまたがる操作をリポジトリ内で実行

## 補足情報（詳細実装例）

### JOOQ実装例
```kotlin
@Repository
class JooqEntityRepository(
    private val dsl: DSLContext,
    private val entityMapper: EntityJooqMapper
) : EntityRepository {
    
    override fun findById(id: EntityId): Entity? {
        val record = dsl.selectFrom(ENTITIES)
            .where(ENTITIES.ID.eq(id.value()))
            .fetchOne()
        
        return record?.let { entityMapper.toDomain(it) }
    }
    
    override fun save(entity: Entity): Entity {
        val id = entity.id.value()
        val exists = dsl.fetchExists(
            dsl.selectFrom(ENTITIES)
                .where(ENTITIES.ID.eq(id))
        )
        
        if (exists) {
            dsl.update(ENTITIES)
                .set(ENTITIES.NAME, entity.name.value())
                .set(ENTITIES.DESCRIPTION, entity.description.value())
                .set(ENTITIES.UPDATED_AT, entity.updatedAt.value())
                .where(ENTITIES.ID.eq(id))
                .execute()
        } else {
            dsl.insertInto(ENTITIES)
                .set(ENTITIES.ID, id)
                .set(ENTITIES.NAME, entity.name.value())
                .execute()
        }
        
        return entity
    }
}
``` 