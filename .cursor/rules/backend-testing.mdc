---
description: バックエンドのテスト戦略と各レイヤーの役割
globs: **/test/**/*.kt
alwaysApply: false
---
# バックエンドテスト戦略ガイドライン

## ファイルパターン

各レイヤーのテストファイルは以下のパターンに従います：

- ドメイン層: `**/src/test/kotlin/**/domain/**/*Test.kt`
- アプリケーション層: `**/src/test/kotlin/**/application/**/*Test.kt`
- コントローラー: `**/src/test/kotlin/**/adapter/rest/**/*Test.kt`
- リポジトリ: `**/src/test/kotlin/**/adapter/persistence/repository/**/*Test.kt`
- クエリサービス: `**/src/test/kotlin/**/adapter/persistence/query/**/*Test.kt`

## テストピラミッド

バックエンドテストは以下のテストピラミッドに従います：

1. **単体テスト (Unit Tests)**
   - ドメイン層のテスト: 外部依存なしの純粋なロジックテスト
   - アプリケーション層のテスト: 外部依存をモック化してユースケースを検証

2. **サービステスト (Service Tests)**
   - リポジトリのテスト: 実際のデータベースを使用して永続化の正確性を検証
   - クエリサービスのテスト: 複雑なクエリの結果と性能を検証

3. **API テスト (API Tests)**
   - コントローラーのテスト: HTTPリクエスト/レスポンスを検証（依存はモック化）

## レイヤー間の関係とモック境界

```
[コントローラー層] → モック → [アプリケーション層] → モック → [ドメイン層リポジトリ]
                                                 ↓
                                         [ドメイン層モデル] → 実際のオブジェクト
                                            
[リポジトリ実装] → 実DB → [実テーブル]
```

- コントローラーテスト: アプリケーション層（ユースケース）をモック化
- アプリケーションテスト: リポジトリインターフェースをモック化、実際のドメインモデルを使用
- ドメインテスト: 純粋なロジックテスト、モックなし
- リポジトリテスト: 実際のデータベースに対するテスト、ドメインモデルは実オブジェクト

## レイヤー別テストの役割と焦点

### 1. ドメイン層テスト

詳細は[ドメイン層テストルール](.cursor/rules/domain-testing.mdc)を参照してください。

**テスト焦点**:
- ドメインモデルの不変条件
- 値オブジェクトのバリデーション
- エンティティの状態変更ロジック
- ドメインサービスの協調動作

### 2. アプリケーション層テスト

詳細は[アプリケーション層テストルール](.cursor/rules/application-testing.mdc)を参照してください。

**テスト焦点**:
- ユースケースのビジネスフロー検証
- 入力検証と例外ハンドリング
- ドメインイベントの発行
- トランザクション境界の正確性

### 3. コントローラーテスト

詳細は[コントローラーテストルール](.cursor/rules/controller-testing.mdc)を参照してください。

**テスト焦点**:
- HTTPリクエスト/レスポンスの正確性
- 入力バリデーション
- 例外からHTTPステータスへの変換
- セキュリティ権限の検証

### 4. リポジトリテスト

詳細は[リポジトリテストルール](.cursor/rules/repository-testing.mdc)を参照してください。

**テスト焦点**:
- データの永続化と読み取りの正確性
- ドメインモデルとDBエンティティの正確な変換
- 複雑なクエリの正確性
- ライフサイクル管理（作成、更新、削除）

### 5. クエリサービステスト

詳細は[クエリサービステストルール](.cursor/rules/query-service-testing.mdc)を参照してください。

**テスト焦点**:
- 複雑な読み取りクエリの正確性
- パフォーマンス検証
- N+1問題の回避
- 集計関数とジョインの検証

## テストスコープの選定ガイド

以下のガイドラインに従って、適切なテストスコープを選定してください：

1. **単一ロジックのテスト**: ドメイン層テストを使用
2. **複数コンポーネントの連携**: アプリケーション層テスト（依存をモック化）
3. **HTTP APIの検証**: コントローラーテスト
4. **データ永続化の検証**: リポジトリテスト
5. **最適化された読み取りの検証**: クエリサービステスト

## まとめ

バックエンドテスト戦略は各レイヤーの責務に合わせた適切なアプローチを採用します。テストピラミッドの原則に従い、下位レイヤーほど多くの詳細なテストを書き、上位レイヤーではより統合的な観点からテストします。各レイヤーのテストルールを参照して、適切なテスト手法を選択してください。 