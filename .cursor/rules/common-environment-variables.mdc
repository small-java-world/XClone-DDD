---
description: 
globs: 
alwaysApply: false
---
---
description: 共通環境変数管理とセキュリティガイドライン
globs: ["**/*.env*", "**/*.yml", "**/*.yaml", "**/*.properties", "**/*.json", "**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/*.kt", "**/*.java"]
---
# 共通環境変数管理とセキュリティガイドライン

このルールは、プロジェクト全体における環境変数の適切な管理方法とセキュリティガイドラインを定義しています。

## 共通ルール

### 基本原則

- 機密情報（パスワード、APIキー、トークンなど）は必ず環境変数で管理し、ソースコードにハードコードしないでください
- 本番環境の機密情報は適切なシークレット管理サービスを使用して保護してください
- 開発環境でも機密情報を`.env`ファイルで管理し、`.gitignore`に追加してリポジトリにコミットされないようにしてください
- 開発者間で共有すべき設定はサンプルファイル（`.env.example`など）を用意し、必要な変数とその説明を記載してください
- 環境変数名は自己説明的で明確な名前を付けてください

### 環境変数ファイル管理

- `.env`関連ファイルはすべて`.gitignore`に追加し、リポジトリにコミットされないようにしてください
- 開発者向けのセットアップ手順に`.env`ファイルの設定方法を明記してください
- プロジェクトに必要な環境変数のサンプルと説明を`.env.example`ファイルで提供してください
  ```
  # データベース設定
  DB_HOST=localhost
  DB_PORT=5432
  DB_NAME=mydb
  DB_USER=user
  DB_PASSWORD=password  # 本番環境では必ず変更してください
  
  # APIキー（開発用ダミー値）
  API_KEY=dummy_api_key_for_development
  ```
- 環境変数の変更履歴を追跡し、重要な変更があった場合は開発チームに通知してください

### セキュリティガイドライン

- 環境変数の値は最小権限の原則に従って設定してください
- 本番環境の機密情報は定期的にローテーションしてください
- デバッグモードや開発機能は本番環境では無効化してください（例: `DEBUG=false`）
- 環境変数経由で提供された機密情報は、ログに出力しないでください
- 異なる環境（開発、テスト、本番）で異なる機密情報を使用してください
- CI/CD環境での機密情報はパイプラインのシークレット機能を利用して保護してください

### 環境変数の検証と利用

- 環境変数が期待通りに設定されているか検証するスクリプトやツールを導入してください
- 存在しない環境変数や不正な値のケースを適切に処理するエラーハンドリングを実装してください
- 環境変数の型を適切に変換してから使用してください（例: 文字列から数値、ブール値への変換）
- デフォルト値を設定する場合は、セキュリティリスクがないものを選択してください

### クロスチーム連携

- フロントエンドとバックエンドで共有する環境変数（API URLなど）は命名規則を統一してください
- 環境変数の変更がシステム全体に与える影響を評価し、関連チームに通知してください
- 新しい機能追加時に必要な環境変数をドキュメントに記載し、プロジェクト参加者に共有してください 