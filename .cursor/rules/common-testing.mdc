---
description: 
globs: 
alwaysApply: false
---
---
description: バックエンドテストの共通ルールとガイドライン
globs: **/src/test/kotlin/**/*Test.kt
alwaysApply: false
---
# 共通ユニットテストルール

File patterns: **/src/test/kotlin/**/*Test.kt

## 基本原則

1. **単一責任**: 各テストは単一の動作や機能をテストする
2. **独立性**: テストは他のテストに依存せず、任意の順序で実行できる
3. **再現性**: テストは何度実行しても同じ結果を返す
4. **自己検証**: テストは自動的に成功/失敗を判定し、手動検証を必要としない
5. **タイムリー**: テストは実装と同時またはそれ以前に作成する（TDD推奨）

## テストスタイル

Kotestのテストスタイルとして、以下を推奨します：

- `DescribeSpec`: BDDスタイルのテストに適しており、動作の記述に焦点を当てる
- `FunSpec`: シンプルな関数スタイルのテストに適している

## 命名規則

- テストクラス: テスト対象クラス名 + `Test`
- テストメソッド: 英語で`should～`の形式で動作を説明する
- Describe/Context: 英語で条件や状態を説明する

## AAA (Arrange-Act-Assert) パターン

テストは以下の3つのフェーズで構成します：

1. **Arrange**: テストのセットアップ（データ準備、モック設定など）
2. **Act**: テスト対象の操作実行
3. **Assert**: 結果の検証

Kotestでは、以下のようにコメントを付けることで各フェーズを明確にします：

```kotlin
// Given (Arrange)
val user = User.create("test", "test@example.com")

// When (Act)
user.changeEmail("new@example.com")

// Then (Assert)
user.email shouldBe Email("new@example.com")
```

## テストカバレッジ目標

各レイヤーに対してテストカバレッジの目標を設定します：

- ドメイン層: 90%以上
- アプリケーション層: 80%以上
- アダプター層: 70%以上
- インフラストラクチャ層: 60%以上

## テストデータ

- テストデータは明示的に設定し、ランダム値やシステム環境に依存しない
- 境界値、エッジケースを考慮したテストケースを作成する
- テストファクトリーやテストデータビルダーを活用して、テスト構築を簡素化する

## まとめ

ユニットテストは、コードの品質と保守性を高めるための重要な手段です。本ルールに従うことで、一貫性のある質の高いテストを作成することができます。 