---
description: バックエンドテストの共通ルールとガイドライン
globs: **/src/test/kotlin/**/*Test.kt
alwaysApply: true
---
# 共通ユニットテストルール

File patterns: **/src/test/kotlin/**/*Test.kt

## 実装方針

このガイドラインは、AIがKotlin + Spring Bootバックエンドの各レイヤーのテストコードを生成・修正する際の一貫した方針を定義します。以下の原則に従ってください：

1. **テスト戦略の一貫性**: 各レイヤーの責務に応じた適切なテスト戦略を適用する
2. **モック境界の明確化**: ユニットテストとインテグレーションテストの境界を明確にする
3. **レイヤー間のテスト連携**: 各レイヤーのテストが全体として機能することを保証する
4. **テストピラミッドの遵守**: 下位レイヤーほど多くのテストを書き、上位レイヤーは少なく
5. **実装詳細への依存回避**: テストはAPIに対して行い、実装詳細に依存しない
6. **ビヘイビア駆動**: テストはドメインの振る舞いを検証する。技術的な実装ではなく、ビジネスルールを検証することに焦点を当てる
7. **明確なテスト構造**: given-when-then またはarrange-act-assertパターンに沿ってテストを構造化する
8. **テスト分離**: 各テストは他のテストから独立していること
9. **命名の一貫性**: テスト名は「should + 期待される結果 + when + 条件」の形式で記述する
10. **検証の厳密さ**: 境界値や異常系を含めた厳密な検証を行う

これらの原則はファイルの詳細な内容よりも優先され、テストコード生成時や修正時の指針となります。各レイヤー固有のテストルールは、この共通方針に基づいて適用してください。

## 基本原則

1. **単一責任**: 各テストは単一の動作や機能をテストする
2. **独立性**: テストは他のテストに依存せず、任意の順序で実行できる
3. **再現性**: テストは何度実行しても同じ結果を返す
4. **自己検証**: テストは自動的に成功/失敗を判定し、手動検証を必要としない
5. **タイムリー**: テストは実装と同時またはそれ以前に作成する（TDD推奨）

## テストスタイル

Kotestのテストスタイルとして、以下を推奨します：

- `DescribeSpec`: BDDスタイルのテストに適しており、動作の記述に焦点を当てる
- `FunSpec`: シンプルな関数スタイルのテストに適している

## 命名規則

- テストクラス: テスト対象クラス名 + `Test`
- テストメソッド: 英語で`should～`の形式で動作を説明する
- Describe/Context: 英語で条件や状態を説明する

## AAA (Arrange-Act-Assert) パターン

テストは以下の3つのフェーズで構成します：

1. **Arrange**: テストのセットアップ（データ準備、モック設定など）
2. **Act**: テスト対象の操作実行
3. **Assert**: 結果の検証

Kotestでは、以下のようにコメントを付けることで各フェーズを明確にします：

```kotlin
// Given (Arrange)
val user = User.create("test", "test@example.com")

// When (Act)
user.changeEmail("new@example.com")

// Then (Assert)
user.email shouldBe Email("new@example.com")
```

## テストカバレッジ目標

各レイヤーに対してテストカバレッジの目標を設定します：

- ドメイン層: 90%以上
- アプリケーション層: 80%以上
- アダプター層: 70%以上
- インフラストラクチャ層: 60%以上

## テストデータ

- テストデータは明示的に設定し、ランダム値やシステム環境に依存しない
- 境界値、エッジケースを考慮したテストケースを作成する
- テストファクトリーやテストデータビルダーを活用して、テスト構築を簡素化する

## まとめ

ユニットテストは、コードの品質と保守性を高めるための重要な手段です。本ルールに従うことで、一貫性のある質の高いテストを作成することができます。 