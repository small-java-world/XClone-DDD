---
description: 
globs: 
alwaysApply: false
---
---
description: RESTコントローラーの実装パターン
globs: **/adapter/api/controller/*.kt
alwaysApply: false
---
# RESTコントローラー実装パターン

## 基本構造

```kotlin
@RestController
@RequestMapping("/api/entities")
class EntityController(
    private val createEntityUseCase: CreateEntityUseCase,
    private val getEntityUseCase: GetEntityUseCase,
    private val updateEntityUseCase: UpdateEntityUseCase,
    private val deleteEntityUseCase: DeleteEntityUseCase
) {
    @PostMapping
    fun createEntity(@RequestBody request: CreateEntityRequest): ResponseEntity<Void> {
        val command = CreateEntityCommand(
            param1 = request.param1,
            param2 = request.param2
        )
        
        val entityId = createEntityUseCase.execute(command)
        
        return ResponseEntity
            .created(URI.create("/api/entities/${entityId.value}"))
            .build()
    }
    
    @GetMapping("/{id}")
    fun getEntity(@PathVariable id: String): ResponseEntity<EntityResponse> {
        val query = GetEntityQuery(id)
        val entityDto = getEntityUseCase.execute(query)
            ?: return ResponseEntity.notFound().build()
            
        return ResponseEntity.ok(EntityResponse.from(entityDto))
    }
    
    // 他のエンドポイント
}
```

## リクエスト/レスポンスモデル

```kotlin
data class CreateEntityRequest(
    @field:NotBlank(message = "param1は必須です")
    val param1: String,
    
    @field:NotBlank(message = "param2は必須です")
    val param2: String
)

data class EntityResponse(
    val id: String,
    val param1: String,
    val param2: String,
    val createdAt: Instant,
    val updatedAt: Instant
) {
    companion object {
        fun from(dto: EntityDto): EntityResponse {
            return EntityResponse(
                id = dto.id,
                param1 = dto.param1,
                param2 = dto.param2,
                createdAt = dto.createdAt,
                updatedAt = dto.updatedAt
            )
        }
    }
}
```

## エラーハンドリング

```kotlin
@RestControllerAdvice
class GlobalExceptionHandler {
    @ExceptionHandler(MethodArgumentNotValidException::class)
    fun handleValidationException(ex: MethodArgumentNotValidException): ResponseEntity<ErrorResponse> {
        val errors = ex.bindingResult.fieldErrors.map { 
            FieldError(it.field, it.defaultMessage ?: "不明なエラー") 
        }
        
        return ResponseEntity
            .badRequest()
            .body(ErrorResponse("入力値が不正です", errors))
    }
    
    @ExceptionHandler(DuplicateAttributeException::class)
    fun handleDuplicateException(ex: DuplicateAttributeException): ResponseEntity<ErrorResponse> {
        return ResponseEntity
            .status(HttpStatus.CONFLICT)
            .body(ErrorResponse(ex.message ?: "リソースが既に存在します"))
    }
    
    // 他の例外ハンドラー
}

data class ErrorResponse(
    val message: String,
    val errors: List<FieldError> = emptyList()
)

data class FieldError(
    val field: String,
    val message: String
)
```

## 認証・認可

```kotlin
// SpringのSecurityContextからユーザーIDを取得
fun getUserId(authentication: Authentication): UserId {
    return UserId.from(authentication.name)
}

// 認可チェックの例
@GetMapping("/{id}")
fun getEntity(
    @PathVariable id: String,
    authentication: Authentication
): ResponseEntity<EntityResponse> {
    val userId = getUserId(authentication)
    val query = GetEntityQuery(id, userId)
    
    val entityDto = getEntityUseCase.execute(query)
        ?: return ResponseEntity.notFound().build()
        
    // 所有者か管理者のみアクセス可能
    if (entityDto.ownerId != userId.value && !isAdmin(authentication)) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).build()
    }
    
    return ResponseEntity.ok(EntityResponse.from(entityDto))
}
```

## RESTfulなURLとHTTP動詞の使い分け

| 操作 | HTTP動詞 | URL | 説明 |
|-----|---------|-----|------|
| 一覧取得 | GET | /api/entities | エンティティの一覧を取得 |
| 詳細取得 | GET | /api/entities/{id} | 特定のエンティティを取得 |
| 作成 | POST | /api/entities | 新しいエンティティを作成 |
| 更新 | PUT | /api/entities/{id} | エンティティを完全に置換 |
| 部分更新 | PATCH | /api/entities/{id} | エンティティを部分的に更新 |
| 削除 | DELETE | /api/entities/{id} | エンティティを削除 |

## HTTPステータスコードの使い分け

- **200 OK**: リクエスト成功（GET, PUT, PATCH）
- **201 Created**: リソース作成成功（POST）
- **204 No Content**: 成功したが返すコンテンツなし（DELETE）
- **400 Bad Request**: リクエスト形式エラー
- **401 Unauthorized**: 認証エラー
- **403 Forbidden**: 認可エラー
- **404 Not Found**: リソース不存在
- **409 Conflict**: リソース競合
- **500 Internal Server Error**: サーバーエラー 