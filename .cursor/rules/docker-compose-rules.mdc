---
description: 
globs: 
alwaysApply: false
---
---
description: データベース設計とマイグレーション規約
globs: **/docker-compose.yml, **/Dockerfile*,**/*.env*
---
# Docker Compose構成と開発環境セットアップ規約

## 適用パス



## 説明
このルールは、Docker Composeを使用した開発環境の構築と管理に関する規約を定めています。各サービスの配置、環境構成、最適化方法について定義しています。

## ルール内容

### 基本方針

- 各サービスを個別コンテナで管理し、開発環境の再現性を最大化してください
- ボリュームマウントによる高速開発体験を提供してください
- ホットリロード対応で開発効率を向上させてください
- 依存関係を考慮した起動順序を制御してください

### 必須サービス構成

開発環境では以下のサービスを標準的に含めてください：

- `app`: バックエンドアプリケーション（Java 21 + Kotlin）
- `db`: データベース（MySQL 8.0）
- `redis`: キャッシュサーバー（Redis Alpine）
- `minio`: S3互換ストレージ（MinIO）
- `frontend`: フロントエンドアプリケーション（Node.js + Next.js）

### ボリューム設定

データ永続化のために以下のボリュームを使用してください：
- `mysql-data`: MySQLデータの永続化
- `redis-data`: Redisデータの永続化
- `minio-data`: MinIOデータの永続化
- `gradle-cache`: Gradleキャッシュの共有（ビルド高速化）

### ポート設定

ローカル開発環境では標準的に以下のポートマッピングを使用してください：
- バックエンド: 8080 → 8080
- MySQL: 3306 → 3306
- Redis: 6379 → 6379
- MinIO API: 9000 → 9000
- MinIO Console: 9001 → 9001
- フロントエンド: 3000 → 3000

### 環境変数

- 各サービスの環境変数は`.env.local`ファイルから読み込んでください
- Docker Compose内で定義が必要な環境変数は直接docker-compose.ymlに記述してください
- 機密情報はenv_fileディレクティブを使用して`.env.local`から読み込んでください

### 依存関係と起動順序

- 依存関係のあるサービス間では`depends_on`指定を使用してください
- 環境変数`WAIT_HOSTS`を活用し、依存サービスの準備完了を待機するようにしてください
- 健全性チェックを導入し、各サービスの起動完了を検証してください

### パフォーマンス最適化

- 開発用コンテナではビルドキャッシュを最大限活用してください
- マウントボリュームを適切に設定し、ホットリロードを最適化してください
- コンテナビルド時間を最小化するために`.dockerignore`ファイルを適切に設定してください

### 開発環境のセットアップ手順

標準的な開発環境セットアップは以下の手順で実施してください：

1. リポジトリのクローン後、`.env.example`ファイルを`.env.local`にコピーし必要な値を設定
2. `docker-compose up -d`を実行して環境を立ち上げる
3. バックエンドコンテナで初期データベースマイグレーションを実行: `docker-compose exec app ./gradlew flywayMigrate`
4. アプリケーションにブラウザからアクセスする: `http://localhost:3000` 