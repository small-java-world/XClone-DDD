---
description: ドメインモデルの詳細実装パターン
globs: **/domain/model/**/*.kt
alwaysApply: false
---
# ドメインモデルパターン実装ガイド

## エンティティの実装パターン

### ファクトリメソッド
```kotlin
// エンティティを新規作成するファクトリメソッドパターン
companion object {
    fun create(
        param1: Type1,
        param2: Type2
    ): Entity {
        // バリデーション
        require(/* 条件 */) { "エラーメッセージ" }
        
        return Entity(
            id = EntityId.generate(), // 新規作成時はIDを生成
            param1 = param1,
            param2 = param2,
            status = Status.ACTIVE,
            createdAt = CreatedAt.now(),
            updatedAt = UpdatedAt.now()
        )
    }
    
    // リポジトリからの再構築用ファクトリメソッド
    fun reconstruct(
        id: EntityId,
        param1: Type1,
        param2: Type2,
        status: Status,
        createdAt: CreatedAt,
        updatedAt: UpdatedAt
    ): Entity {
        return Entity(
            id = id,
            param1 = param1,
            param2 = param2,
            status = status,
            createdAt = createdAt,
            updatedAt = updatedAt
        )
    }
}
```

### 状態変更メソッド
```kotlin
// 状態変更メソッドは明確な命名を使用し、不変条件を強制する
fun updateParam1(newParam1: Type1): Entity {
    require(status == Status.ACTIVE) { "非アクティブなエンティティは更新できません" }
    
    return copy(
        param1 = newParam1,
        updatedAt = UpdatedAt.now()
    )
}

fun delete(): Entity {
    return copy(
        status = Status.DELETED,
        updatedAt = UpdatedAt.now()
    )
}
```

## 値オブジェクトの実装パターン

### 基本構造
```kotlin
@JvmInline
value class ValueObjectName private constructor(val value: String) {
    companion object {
        fun from(value: String): ValueObjectName {
            // バリデーション
            require(isValid(value)) { "不正な値です: $value" }
            
            return ValueObjectName(value)
        }
        
        private fun isValid(value: String): Boolean {
            // 検証ロジック
            return value.matches(Regex("パターン"))
        }
    }
}
```

## ドメインイベントの実装

### イベント定義
```kotlin
interface DomainEvent

data class EntityCreatedEvent(
    val entityId: EntityId,
    val timestamp: Instant = Instant.now()
) : DomainEvent
```

### イベント発行
```kotlin
// エンティティにイベント発行機能を追加
class Entity private constructor(
    // プロパティ
    private val _events: MutableList<DomainEvent> = mutableListOf()
) {
    val events: List<DomainEvent> get() = _events.toList()
    
    fun clearEvents() {
        _events.clear()
    }
    
    private fun registerEvent(event: DomainEvent) {
        _events.add(event)
    }
    
    // ファクトリメソッド
    companion object {
        fun create(...): Entity {
            val entity = Entity(...)
            entity.registerEvent(EntityCreatedEvent(entity.id))
            return entity
        }
    }
} 