---
description: 
globs: 
alwaysApply: false
---
# 環境変数管理とセキュリティガイドライン

## 適用パス
/**/*.{ts,tsx,js,jsx,kt,java}

## 説明
このルールは、プロジェクト全体で環境変数の適切な管理とセキュリティ対策を徹底するためのガイドラインです。バックエンドとフロントエンドの両方に適用されます。

## ルール内容

### 基本原則

- 環境変数を最大限に活用し、設定の外部化とセキュリティを確保してください
- 機密情報（APIキー、パスワードなど）は決してソースコードに直接記述しないでください
- 環境ごとに適切な変数設定を用意し、開発/テスト/本番環境の分離を徹底してください

### 環境変数ファイル

- `.env.local` ファイルをバージョン管理対象外（.gitignoreに追加）として使用してください
- バックエンドは Spring Boot 起動時に `.env.local` を読み込む設定を行ってください
- フロントエンドは Next.js の環境変数機能を活用し、`frontend/.env.local` を使用してください
- `.env.example` ファイルを用意し、必要な環境変数のキーと説明を記載してください（値は含めない）

### 環境変数の命名規則

- バックエンド環境変数: スネークケースの大文字（例: `DB_USERNAME`）
- フロントエンド公開環境変数: `NEXT_PUBLIC_` プレフィックスを付けてください（例: `NEXT_PUBLIC_API_URL`）

### セキュリティガイドライン

- 公開リポジトリに `.env` ファイルや機密情報を誤ってコミットしないよう注意してください
- 本番環境の機密情報は適切なシークレット管理サービスを利用してください
- 環境変数の値のログ出力は最小限に抑え、特に機密情報のログ出力は禁止です

### 環境変数の検証

- アプリケーション起動時に必須環境変数の存在を検証し、不足している場合は明確なエラーメッセージを表示してください
- 環境変数の値が適切な形式であることを検証する仕組みを実装してください

### クロスチーム協力

- 環境変数の変更はチーム全体に通知し、`.env.example` の更新を徹底してください
- バックエンドとフロントエンド間で共有する設定は命名規則を統一し、混乱を防いでください 