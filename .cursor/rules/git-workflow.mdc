---
description: 
globs: 
alwaysApply: false
---
# Gitブランチ戦略とコミットメッセージ規約

## 適用パス
/**/*

## 説明
このルールは、Git操作におけるブランチ戦略、コミットメッセージ形式、プルリクエスト管理のルールを定義しています。ドメイン駆動設計(DDD)の境界コンテキストに基づいたブランチ命名とコミットメッセージ構造を採用しています。

## ルール内容

### ブランチ戦略

当プロジェクトでは、GitFlowをベースにした以下のブランチ戦略を採用してください：

#### メインブランチ

- `main`: 本番環境のソースコード。常にリリース可能な状態を維持
- `develop`: 開発環境のソースコード。次のリリースに向けた開発の集約先

#### 作業用ブランチ

以下の命名規則に従ってブランチを作成してください：

- 機能開発: `feature/[ドメイン]-[機能名]` (例: `feature/post-reply-function`)
- バグ修正: `fix/[ドメイン]-[バグ概要]` (例: `fix/user-login-error`)
- リファクタリング: `refactor/[ドメイン]-[内容]` (例: `refactor/timeline-performance`)
- ドキュメント: `docs/[内容]` (例: `docs/api-specification`)
- リリース準備: `release/v[バージョン]` (例: `release/v1.0.0`)
- 緊急修正: `hotfix/[バグ概要]` (例: `hotfix/security-vulnerability`)

### コミットメッセージ規約

#### 基本形式

以下の形式でコミットメッセージを作成してください：
```
[タイプ](mdc:ドメイン): コミット内容の要約（50文字以内）

- 変更内容の詳細説明（必要な場合）
- 複数行に渡る説明はハイフンで箇条書きにする
```

#### タイプ

以下のタイプを使用してください：
- `feat`: 新機能
- `fix`: バグ修正
- `refactor`: リファクタリング（機能追加やバグ修正を含まない）
- `style`: コードスタイルの変更（空白、フォーマット、セミコロンの追加等）
- `docs`: ドキュメントの変更
- `test`: テストの追加・修正
- `chore`: ビルドプロセスやツールの変更、依存関係の更新など

#### ドメイン

コミットがどのドメイン境界に関連するかを指定してください：
- `user`: ユーザー管理ドメイン
- `post`: 投稿ドメイン
- `timeline`: タイムラインドメイン
- `engagement`: エンゲージメントドメイン（いいね、リポスト等）
- `notification`: 通知ドメイン
- `infra`: インフラストラクチャ関連
- `ui`: UI/UX関連
- `config`: 設定ファイル関連
- `all`: 複数のドメインにまたがる変更

### プルリクエスト（PR）のルール

#### PRのタイトル

コミットメッセージと同様のタイプとドメインを使用し、以下の形式で作成してください：
```
[タイプ](mdc:ドメイン): PR内容の要約
```

#### マージ戦略

- PRは少なくとも1人のレビュアーの承認が必要です
- CIパイプラインのすべてのチェック（ビルド、テスト、リント）が成功している必要があります
- マージ方法は「Squash and merge」を基本とし、意味のある単一のコミットにまとめてください
- 例外的に関連する小さな変更を複数含むPRは「Rebase and merge」を使用可能です

### 競合解決のガイドライン

- ブランチの競合が発生した場合は、作業ブランチでrebaseを行ってください
- 競合を解決した後、`git push --force-with-lease`で強制プッシュを行ってください

### リリースプロセス

1. `release/v[バージョン]`ブランチを`develop`から作成
2. バージョン番号の更新やリリースノートの作成
3. QAとバグ修正を繰り返す
4. リリース準備が整ったら`main`にマージ
5. `main`からリリースタグを作成 (`v1.0.0`など)
6. `release`ブランチを`develop`にマージバック 