---
description: 
globs: 
alwaysApply: false
---
---
description: Cursorルールファイル作成のガイドライン - AIエージェントが効率的に処理できるルール設計
globs: ["**/.cursor/rules/*.md", "**/.cursor/rules/*.mdc"]
alwaysApply: false
---
# Cursorルールファイル作成のガイドライン

## 目的

このルールは、AI支援エージェントが効率的に処理できるCursorルールファイル（`.cursor/rules`ディレクトリ内の`.mdc`ファイル）の設計原則を定義します。適切に設計されたルールファイルは、AIエージェントのコンテキストウィンドウを効率的に活用し、自走的な問題解決を促進します。

## 基本原則

1. **コンテキスト最小化**: ルールファイルは簡潔に保ち、必要な情報のみを含める
2. **関心の分離**: 各ルールファイルは単一の責務や関心事に集中する
3. **参照による連携**: 詳細は別のルールファイルに委譲し、参照で連携する
4. **自走性の支援**: AIエージェントが柔軟に判断できる余地を残す

## ルールファイルの理想的な構造

### 1. ヘッダー情報

```
---
description: 簡潔な説明（1行）
globs: ["**/対象となるファイルパターン"]
alwaysApply: false (or true)
---
```

### 2. 本体構造

```
# タイトル

## 概要
- 簡潔な説明（2-3行）
- このルールが解決する問題や目的

## 基本原則
- 3-5つの主要な原則を箇条書きで

## 基本構造
- 中心となる構造や概念の説明
- 図表や簡単なコード例

## 実装例
- 最小限の実装例
- 詳細は別ファイルへの参照

## 関連ルール
- 関連する他のルールファイルへの参照
```

## 設計ガイドライン

### コンテキスト最小化の実践

1. **ファイルサイズを小さく保つ**: 1ファイルあたり50-100行程度に抑える
2. **詳細な例を最小限に**: 1トピックにつき1つの簡潔な例のみを示す
3. **説明は要点のみ**: 長い説明文よりも箇条書きリストを優先する
4. **重複を避ける**: 他のルールと重複する内容は参照で代替する。特に、ルールファイルのglobsを確認し、同じファイルパターンに適用される複数のルール間で内容が重複しないよう注意する。複数のルールが同時に適用される領域では、各ルールが担当する関心事を明確に分離する

### 効果的な参照パターン

```
詳細なパターンと実装ガイドラインは `.cursor/rules/関連ルール.mdc` を参照してください。
```

### 自走性を高める記述スタイル

1. **強制ではなく提案**: 「〜すべきです」より「〜が一般的です」という表現を使用
2. **選択肢を示す**: 複数のアプローチがある場合はそれを明示
3. **コンテキスト依存の判断を委譲**: 「状況によって適切なアプローチは異なります」等の記述を含める
4. **基本原則と具体例のバランス**: 原則を理解すれば応用できるよう、詳細すぎる具体例は避ける

## ルールファイル間の関係性

### 階層構造の設計

1. **基本ルール**: アーキテクチャなどの基本概念を説明する上位ルール
2. **詳細ルール**: 特定のパターンや実装詳細を説明する下位ルール

例:
```
backend-architecture.mdc (基本) → value-object-patterns.mdc (詳細)
                        → entity-factory-patterns.mdc (詳細)
                        → repository-testing.mdc (詳細)
                        → jooq-rules.mdc (詳細)
```

### 重複排除の戦略

1. **一度だけの定義**: 概念や原則は一つのファイルで定義し、他では参照する
2. **詳細の委譲**: 詳細な実装パターンは専門ルールファイルに委譲する
3. **標準ディレクトリ構造**: 構造定義は基本ルールファイルに一元化する

## グッドプラクティス例

### 簡素化前:

```kotlin
// 詳細な実装
class ComplexExample {
    fun method1() {
        // 複雑なロジック1
        // 複雑なロジック2
        // 複雑なロジック3
    }
    
    fun method2() {
        // さらに複雑なロジック
    }
    
    // 他の多くのメソッド
}
```

### 簡素化後:

```kotlin
// 基本的な例
class Example {
    fun mainMethod() {
        // 中心となる概念を示す最小限のコード
    }
}

// 詳細は specific-pattern.mdc を参照
```

## アンチパターン

以下のようなアンチパターンは避けてください：

1. **過度な詳細**: ルールファイルに全ての詳細を詰め込む
2. **一貫性のない構造**: ファイルごとに大きく異なる構造を持つ
3. **重複情報**: 複数のルールファイルに同じ情報を記載する
4. **孤立したルール**: 他のルールファイルへの参照がない
5. **過度な制約**: AIエージェントの判断の余地を残さない厳格すぎるルール

## まとめ

効果的なCursorルールファイルは、AIエージェントが効率的に処理できるように設計され、コンテキストを最小化しながら必要な情報を提供します。ルールの分割と参照による連携を活用し、AIエージェントの自走性を高める設計を心がけましょう。 