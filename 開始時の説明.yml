# Xクローンアプリのテックブログ題材
description: 会社のテックブログの題材として、Xのクローンアプリを作成します。設計思想としてDDD（ドメイン駆動設計）とクリーンアーキテクチャを採用します。
クリーンアーキテクチャレイヤーにおけるレイヤー構造とプロジェクト構造の記載もお願いします。
各種コードについてはgradleと.env.local以外はサンプルでレベルの記載に留めてください。

技術スタック:
  バックエンド:
    言語・フレームワーク: Kotlin + Spring Boot
    ビルド自動化ツール: gradle
    Javaバージョン: Java 21
    ユニットテスト: Kotest + Mockk
    マイグレーションツール: Flyway
    環境変数:
      概要: 環境変数を最大限に活用
      ローカル開発: .env.local を Spring Boot 起動時に読み込み
    ORM: jOOQ
  
  設計思想:
    ドメイン境界: ドメイン境界を強く意識し、パッケージ名をドメイン境界に基づいて決定
    アプリケーションサービス:
      命名規則: XXXUseCase
      原則: 単一責務を厳守
      引数形式: XXXCommand を使用
  
  AI駆動開発:
    ツール: AI Editor Cursor のエージェントを利用
    ルール: 人間はコードを1文字も書かない
  
  TDD:
    概要: テスト駆動開発（TDD）を採用
  
  データベース:
    メインDB: MySQL
    キャッシュ: Redis
    主キー設計:
      形式: UUID v7
      保存形式: BINARY(16)型
      最適化: 
        - タイムスタンプビットのスワップを適用し、時系列でのインデックス効率を向上
        - アプリケーション層でUUID⇔バイナリ変換を処理
  
  ストレージ:
    S3互換: 
      種類: MinIO
      用途: S3互換ストレージとして利用
      環境: ローカル開発環境で利用
  
  フロントエンド:
    フレームワーク: Next.js
    ユニットテスト: Vitest
    設計パターン:
      概要: Container/Presentationalパターン
      原則:
        - ビジネスロジックとUIの分離
        - 再利用可能なコンポーネントの作成
        - 状態管理の明確な責務分離
    React Hooks:
      基本方針: 
        - 適切なHooksの選択でパフォーマンス最適化
        - React19の新Hooks積極活用（useActionState、useOptimistic）
      データフェッチング:
        - useEffectでの直接フェッチは非推奨
        - React QueryまたはSWRを活用
      フォーム管理:
        - useFormStateとuseFormStatusの活用
      状態管理:
        - 単純な状態にはuseState
        - 複雑な状態遷移にはuseReducer
        - 計算コストの高い値にはuseMemo
  
  E2Eテスト:
    ツール: Playwright
    実行戦略:
      - 並列実行: 
          概要: 複数ブラウザで並列実行するテスト
          特性: データ参照のみで副作用がないテスト
          用途: UIの表示確認や読み取り系機能テスト
      - シングル実行: 
          概要: 一度に1つのブラウザで実行するテスト
          特性: データ更新を伴うテスト
          理由: 並列実行すると他テストケースの前提条件が崩壊する
          対象: ユーザー登録、投稿作成など状態変更を伴う操作
      - スクリプト分離: 
          方法: npm scriptsで更新系/参照系テストを明確に分離
          設計: テスト実行順序を制御し、データ整合性を確保
    テスト安定性:
      - データアイソレーション戦略の徹底
      - テスト前提条件の明確化
      - クリーンアップ処理の確実な実行
  
  開発環境:
    コンテナ: Docker Compose で動作
    管理方針:
      - 各サービスを個別コンテナで管理
      - 開発環境の再現性を最大化
      - ボリュームマウントによる高速開発体験
      - ホットリロード対応
    起動最適化:
      - 依存関係を考慮した起動順序制御
      - バックグラウンドプロセスの効率化